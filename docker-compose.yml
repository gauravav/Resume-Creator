services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: rector-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./Backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - rector-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: rector-minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    ports:
      - "9002:9000"  # API
      - "9003:9001"  # Console
    volumes:
      - minio_data:/data
      - ../minio/minio-data:/import  # Import existing data
    networks:
      - rector-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MinIO Client - Initialize buckets
  mc:
    image: minio/mc:latest
    container_name: rector-mc
    depends_on:
      - minio
    networks:
      - rector-network
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set rector http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
      /usr/bin/mc mb rector/resumes --ignore-existing;
      /usr/bin/mc mb rector/documents --ignore-existing;
      /usr/bin/mc mb rector/images --ignore-existing;
      /usr/bin/mc mb rector/backups --ignore-existing;
      /usr/bin/mc policy set public rector/resumes;
      echo 'MinIO buckets initialized successfully';
      exit 0;
      "

  # Rector Backend Application
  rector-backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    container_name: rector-backend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_PORT=${MINIO_PORT}
      - MINIO_USE_SSL=${MINIO_USE_SSL}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME}
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      mc:
        condition: service_completed_successfully
    networks:
      - rector-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Rector Frontend Application
  rector-frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
    container_name: rector-frontend
    ports:
      - "3001:3000"
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    depends_on:
      - rector-backend
    networks:
      - rector-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  minio_data:

networks:
  rector-network:
    driver: bridge